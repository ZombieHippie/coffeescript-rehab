// Generated by CoffeeScript 1.7.1
(function() {
  var Rehab, compiler, deppy, fs, p, parser, wrench,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  deppy = require('deppy');

  wrench = require('wrench');

  parser = require('./parser');

  compiler = require('./compiler');

  fs = require('fs');

  p = require('path');

  module.exports = Rehab = (function() {
    function Rehab(path, ext) {
      var file, _i, _len, _ref;
      if (path == null) {
        path = null;
      }
      this.ext = ext != null ? ext : null;
      this.concat = __bind(this.concat, this);
      this.compile = __bind(this.compile, this);
      this.listFiles = __bind(this.listFiles, this);
      this.resolveDependencies = __bind(this.resolveDependencies, this);
      if (path == null) {
        console.warn("Path was not provided upon construction of new Rehab()");
        return;
      }
      this.dep = deppy.create();
      this.sources = [];
      this.unresolved = [];
      if (p.extname(path) === '') {
        _ref = wrench.readdirSyncRecursive(path);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          file = _ref[_i];
          if (p.extname(file) !== '') {
            this.unresolved.push(p.resolve(path, file));
          }
        }
      } else {
        this.unresolved.push(p.resolve(path));
      }
      if (this.ext == null) {
        this.ext = p.extname(this.unresolved[0]).slice(1);
      }
      this.ext = this.ext.toLowerCase();
      this.resolveDependencies();
      this.dep(this.REQ_MAIN_NODE, this.sources);
    }

    Rehab.prototype.resolveDependencies = function() {
      var data, dep, dependency, deps, ext, loose, loosedir, _results;
      _results = [];
      while (loose = this.unresolved[0]) {
        data = fs.readFileSync(loose);
        ext = p.extname(loose).slice(1);
        deps = parser(data.toString(), ext);
        loosedir = p.dirname(loose);
        deps = ((function() {
          var _i, _len, _results1;
          _results1 = [];
          for (_i = 0, _len = deps.length; _i < _len; _i++) {
            dep = deps[_i];
            _results1.push(p.resolve(loosedir, dep + '.' + ext));
          }
          return _results1;
        })()).slice(0);
        this.dep(loose, deps);
        this.unresolved.shift();
        this.sources.push(loose);
        _results.push((function() {
          var _i, _len, _results1;
          _results1 = [];
          for (_i = 0, _len = deps.length; _i < _len; _i++) {
            dependency = deps[_i];
            if ((__indexOf.call(this.sources, dependency) < 0)) {
              _results1.push(this.unresolved.push(dependency));
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Rehab.prototype.listFiles = function() {
      return this.dep.resolve(this.REQ_MAIN_NODE).filter((function(_this) {
        return function(elem) {
          return elem !== _this.REQ_MAIN_NODE;
        };
      })(this));
    };

    Rehab.prototype.compile = function() {
      var fn;
      if (fn = compiler[this.ext]) {
        return fn(this.concat());
      } else {
        console.error("Can't compile files of type:" + this.ext);
        return null;
      }
    };

    Rehab.prototype.concat = function() {
      var code, err, source, _i, _len, _ref;
      code = "";
      _ref = this.listFiles();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        source = _ref[_i];
        try {
          code += '\n' + fs.readFileSync(source);
        } catch (_error) {
          err = _error;
          if (err.code === 'ENOENT') {
            return;
          } else {
            throw err;
          }
        }
      }
      return code;
    };

    Rehab.prototype.process = function(filePath) {
      return new Rehab(filePath, 'coffee').listFiles();
    };

    return Rehab;

  })();

}).call(this);
