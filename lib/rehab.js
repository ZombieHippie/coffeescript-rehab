// Generated by CoffeeScript 1.7.1
(function() {
  var Rehab, fs, path, tsort, wrench;

  module.exports = tsort = function(edges) {
    var Node, nodes, sorted, visit, visited;
    nodes = {};
    sorted = [];
    visited = {};
    Node = function(id) {
      this.id = id;
      this.afters = [];
    };
    edges.forEach(function(v) {
      var from, to;
      from = v[0];
      to = v[1];
      if (!nodes[from]) {
        nodes[from] = new Node(from);
      }
      if (!nodes[to]) {
        nodes[to] = new Node(to);
      }
      nodes[from].afters.push(to);
    });
    Object.keys(nodes).forEach(visit = function(idstr, ancestors) {
      var id, node;
      node = nodes[idstr];
      id = node.id;
      if (visited[idstr]) {
        return;
      }
      if (!Array.isArray(ancestors)) {
        ancestors = [];
      }
      ancestors.push(id);
      visited[idstr] = true;
      node.afters.forEach(function(afterID) {
        if (ancestors.indexOf(afterID) >= 0) {
          throw new Error("closed chain : " + afterID + " is in " + id);
        }
        visit(afterID.toString(), ancestors.map(function(v) {
          return v;
        }));
      });
      return sorted.unshift(id);
    });
    return sorted;
  };

  wrench = require('wrench');

  fs = require('fs');

  path = require('path');

  module.exports = Rehab = (function() {
    function Rehab() {}

    String.prototype.beginsWith = function(str) {
      return this.match(RegExp("^" + str)) != null;
    };

    String.prototype.endsWith = function(str) {
      return this.match(RegExp("" + str + "$")) != null;
    };

    String.prototype.dir = function() {
      if (this.endsWith('.coffee')) {
        return path.dirname(this);
      } else {
        return this.toString();
      }
    };

    Rehab.prototype.REQ_TOKEN = "#_require";

    Rehab.prototype.REQ_MAIN_NODE = "__MAIN__";

    Rehab.prototype.process = function(filePath) {
      var depGraph, depList;
      depGraph = this.processDependencyGraph(filePath);
      depGraph = this.normalizeFilename(filePath.dir(), depGraph);
      depList = this.processDependencyList(depGraph);
      return depList.reverse();
    };

    Rehab.prototype.processDependencyGraph = function(filePath) {
      var depGraph, f, _i, _len, _ref;
      depGraph = [];
      _ref = this.getSourceFiles(filePath);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        f = _ref[_i];
        this.parseRequiredFile(filePath.dir(), f, depGraph);
      }
      return depGraph;
    };

    Rehab.prototype.normalizeFilename = function(folder, depGraph) {
      var edge, file, fileDep, fullPath, _i, _len, _ref;
      for (_i = 0, _len = depGraph.length; _i < _len; _i++) {
        edge = depGraph[_i];
        if (edge[1] === this.REQ_MAIN_NODE) {
          continue;
        }
        fileDep = this.normalizeCoffeeFilename(edge[0]);
        file = this.normalizeCoffeeFilename(edge[1]);
        fullPath = path.resolve(path.dirname(fileDep), file);
        file = path.join(folder, path.relative(folder, fullPath));
        [].splice.apply(edge, [0, 2].concat(_ref = [fileDep, file])), _ref;
      }
      return depGraph;
    };

    Rehab.prototype.normalizeCoffeeFilename = function(file) {
      if (!file.endsWith(".coffee")) {
        file = "" + file + ".coffee";
      }
      return path.normalize(file);
    };

    Rehab.prototype.processDependencyList = function(depGraph) {
      var depList;
      depList = tsort(depGraph);
      return depList.filter((function(_this) {
        return function(i) {
          return !i.beginsWith(_this.REQ_MAIN_NODE);
        };
      })(this));
    };

    Rehab.prototype.getSourceFiles = function(filePath) {
      var file, files, _i, _len, _results;
      if (filePath.endsWith('.coffee')) {
        return [path.basename(filePath)];
      } else {
        files = wrench.readdirSyncRecursive(filePath);
        _results = [];
        for (_i = 0, _len = files.length; _i < _len; _i++) {
          file = files[_i];
          if (file.endsWith('.coffee')) {
            _results.push(file);
          }
        }
        return _results;
      }
    };

    Rehab.prototype.parseRequiredLine = function(line) {
      var match;
      match = line.match(RegExp("^" + this.REQ_TOKEN + "\\s+(.+(?=coffee)coffee)"));
      if (match != null) {
        return match[1];
      } else {
        return null;
      }
    };

    Rehab.prototype.parseRequiredFile = function(folder, file, depGraph) {
      var content, depFileName, filePath, line, _i, _len, _ref, _results;
      filePath = path.join(folder, file);
      depGraph.push([filePath, this.REQ_MAIN_NODE]);
      content = fs.readFileSync(filePath, 'utf8');
      _ref = content.split(/\s*[\n\r]+\s*/);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        line = _ref[_i];
        if (depFileName = this.parseRequiredLine(line)) {
          _results.push(depGraph.push([filePath, depFileName]));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return Rehab;

  })();

}).call(this);
