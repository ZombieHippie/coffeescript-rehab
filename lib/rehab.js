// Generated by CoffeeScript 1.7.1
(function() {
  var Rehab, deppy, fs, p, tsort, wrench,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  module.exports = tsort = function(edges) {
    var Node, nodes, sorted, visit, visited;
    nodes = {};
    sorted = [];
    visited = {};
    Node = function(id) {
      this.id = id;
      this.afters = [];
    };
    edges.forEach(function(v) {
      var from, to;
      from = v[0];
      to = v[1];
      if (!nodes[from]) {
        nodes[from] = new Node(from);
      }
      if (!nodes[to]) {
        nodes[to] = new Node(to);
      }
      nodes[from].afters.push(to);
    });
    Object.keys(nodes).forEach(visit = function(idstr, ancestors) {
      var id, node;
      node = nodes[idstr];
      id = node.id;
      if (visited[idstr]) {
        return;
      }
      if (!Array.isArray(ancestors)) {
        ancestors = [];
      }
      ancestors.push(id);
      visited[idstr] = true;
      node.afters.forEach(function(afterID) {
        if (ancestors.indexOf(afterID) >= 0) {
          throw new Error("closed chain : " + afterID + " is in " + id);
        }
        visit(afterID.toString(), ancestors.map(function(v) {
          return v;
        }));
      });
      return sorted.unshift(id);
    });
    return sorted;
  };

  wrench = require('wrench');

  fs = require('fs');

  p = require('path');

  deppy = require('deppy');

  module.exports = Rehab = (function() {
    String.prototype.beginsWith = function(str) {
      return this.match(RegExp("^" + str)) != null;
    };

    String.prototype.endsWith = function(str) {
      return this.match(RegExp("" + str + "$")) != null;
    };

    String.prototype.getDir = function() {
      if (this.endsWith('.coffee')) {
        return p.dirname(this);
      } else {
        return this.toString();
      }
    };

    function Rehab(path) {
      var sourceFolder, sources;
      if (path == null) {
        path = null;
      }
      this.parseRequiredFile = __bind(this.parseRequiredFile, this);
      this.parseRequiredLine = __bind(this.parseRequiredLine, this);
      this.parseFile = __bind(this.parseFile, this);
      this.processDependencies = __bind(this.processDependencies, this);
      this.fileList = __bind(this.fileList, this);
      if (path != null) {
        console.warn("Path was not provided upon construction of new Rehab()");
        return;
      }
      this.dep = deppy.create();
      sources = this.getSourceFiles(path);
      sourceFolder = path.getDir();
      this.processDependencies(sources, sourceFolder);
    }

    Rehab.prototype.fileList = function() {
      return this.dep.resolve(this.REQ_MAIN_NODE);
    };

    Rehab.prototype.REQ_TOKEN = "#_require";

    Rehab.prototype.REQ_MAIN_NODE = "__MAIN__";

    Rehab.prototype.process = function(filePath) {
      return new Rehab(filePath).fileList();
    };

    Rehab.prototype.processDependencies = function(sources, folder) {
      var f, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = sources.length; _i < _len; _i++) {
        f = sources[_i];
        _results.push(this.parseFile(f, folder));
      }
      return _results;
    };

    Rehab.prototype.normalizeCoffeeFile = function(filename) {
      if (!filename.endsWith('.coffee')) {
        filename = filename + '.coffee';
      }
      return filename;
    };

    Rehab.prototype.normalizeFilename = function(folder, depGraph) {
      var edge, file, fileDep, fullPath, _i, _len, _ref;
      for (_i = 0, _len = depGraph.length; _i < _len; _i++) {
        edge = depGraph[_i];
        if (edge[1] === this.REQ_MAIN_NODE) {
          continue;
        }
        fileDep = this.normalizeCoffeeFilename(edge[0]);
        file = this.normalizeCoffeeFilename(edge[1]);
        fullPath = p.resolve(p.dirname(fileDep), file);
        file = p.join(folder, p.relative(folder, fullPath));
        [].splice.apply(edge, [0, 2].concat(_ref = [fileDep, file])), _ref;
      }
      return depGraph;
    };

    Rehab.prototype.normalizeCoffeeFilename = function(file) {
      if (!file.endsWith(".coffee")) {
        file = "" + file + ".coffee";
      }
      return p.normalize(file);
    };

    Rehab.prototype.processDependencyList = function(depGraph) {
      var depList;
      depList = tsort(depGraph);
      return depList.filter((function(_this) {
        return function(i) {
          return !i.beginsWith(_this.REQ_MAIN_NODE);
        };
      })(this));
    };

    Rehab.prototype.getSourceFiles = function(filePath) {
      var file, files, _i, _len, _results;
      if (filePath.endsWith('.coffee')) {
        return [p.basename(filePath)];
      } else {
        files = wrench.readdirSyncRecursive(filePath);
        _results = [];
        for (_i = 0, _len = files.length; _i < _len; _i++) {
          file = files[_i];
          if (file.endsWith('.coffee')) {
            _results.push(file);
          }
        }
        return _results;
      }
    };

    Rehab.prototype.parseFile = function(file, folder) {
      var filePath;
      file = this.normalizeCoffeeFile(file);
      filePath = p.resolve(folder, file);
      return console.log({
        filePath: filePath
      });
    };

    Rehab.prototype.parseRequiredLine = function(line) {
      var match;
      match = line.match(RegExp("^" + this.REQ_TOKEN + "\\s+(.+(?=coffee)coffee)"));
      if (match != null) {
        return match[1];
      } else {
        return null;
      }
    };

    Rehab.prototype.parseRequiredFile = function(folder, basename) {
      var content, filePath, line, reqs, requiredFile, _i, _len, _ref;
      filePath = p.join(folder, basename);
      reqs = [this.REQ_MAIN_NODE];
      content = fs.readFileSync(filePath, 'utf8');
      _ref = content.split(/\s*[\n\r]+\s*/);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        line = _ref[_i];
        if (requiredFile = this.parseRequiredLine(line)) {
          reqs.push([requiredFile]);
        }
      }
      return this.dep(filePath, reqs);
    };

    return Rehab;

  })();

}).call(this);
